name: 'Backend CD pipeline'
on:
  workflow_dispatch:
  push:
    paths:
      - 'starter/backend/**'
    branches:
      - main
env:
  working-dir: 'starter/backend'
  region: 'us-east-1'
jobs:
  lint-test-deploy:
    name: 'Lint, Test and Build'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ env.working-dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Python and cache
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'
      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies
        run: pipenv install --dev
      - name: Run lint
        run: pipenv run lint
      - name: Run test
        run: pipenv run test
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: ${{ env.region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
            terraform_version: "1.4.5"
      - name: Terraform Initialize
        run: terraform init
        working-directory: 'setup/terraform'

      - name: Terraform Validate
        run: terraform validate 
        working-directory: 'setup/terraform'

      - name: Terraform Plan
        run: terraform plan
        working-directory: 'setup/terraform'

      - name: Terraform Apply
        run: |
          export TF_LOG=DEBUG
          terraform apply -auto-approve
        working-directory: 'setup/terraform'
      - name: Set Terraform Outputs to ENV
        run: |
          echo "cluster_name=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "backend_ecr=$(terraform output -raw backend_ecr)" >> $GITHUB_ENV
        working-directory: 'setup/terraform'

      - name: Setup kubectl 
        uses: azure/setup-kubectl@v3
      
      - name: Run docker build
        run: docker build --tag=backend:$GITHUB_SHA .
      - name: Tag Docker image
        run: |
          docker tag backend:$GITHUB_SHA $backend_ecr:$GITHUB_SHA
      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ env.region }} | docker login --username AWS --password-stdin $backend_ecr
      - name: Push Docker image to ECR
        run: docker push $backend_ecr:$GITHUB_SHA
      - name: Deploy to EKS
        run: |
          cd k8s/
          aws eks update-kubeconfig --name $cluster_name --region ${{ env.region }}
          kustomize edit set image backend=$backend_ecr:$GITHUB_SHA
          kustomize build | kubectl apply -f -
      # - name: Kube Auth
      #   run: ./init.sh
      - name: Destroy Terraform resources
        if: ${{ failure() }}
        run: terraform destroy -auto-approve
        working-directory: 'setup/terraform'
