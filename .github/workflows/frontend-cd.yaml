name: 'Frontend CD pipeline'
on:
  workflow_dispatch:
  push:
    paths:
      - 'starter/frontend/**'
    branches:
      - main
env:
  working_dir: 'starter/frontend'
  region: ${{secrets.AWS_REGION}}
  cluster_name: ${{ secrets.CLUSTER_NAME }}
  frontend_ecr: ${{ secrets.FRONTEND_ECR }}
  kubectl_version: 'v1.29.3'
jobs:
  lint-test-deploy:
    name: 'Lint, Test and Build'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ env.working_dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '${{ env.working_dir }}/package-lock.json'
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Run test
        run: npm test
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}
      - name: Setup kubectl 
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.kubectl_version }}
      - name: Run docker build
        run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=frontend:$GITHUB_SHA .
      - name: Tag Docker image
        run: |
          docker tag frontend:$GITHUB_SHA ${{ env.frontend_ecr }}:$GITHUB_SHA
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      # - name: Login to ECR
      #   run: aws ecr get-login-password --region ${{ env.region }} | docker login --username AWS --password-stdin ${{ env.frontend_ecr }}
      - name: Push Docker image to ECR
        run: docker push ${{ env.frontend_ecr }}:$GITHUB_SHA
      - name: Deploy to EKS
        run: |
          cd k8s/
          aws eks update-kubeconfig --name ${{ env.cluster_name}} --region ${{ env.region }}
          kustomize edit set image frontend=${{ env.frontend_ecr }}:$GITHUB_SHA
          kustomize build | kubectl apply -f -
